{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "smartHTMLMode"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\njava.util.concurrent.TimeUnit\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*\ncom.twosigma.beaker.table.*\ncom.twosigma.beaker.table.format.*\ncom.twosigma.beaker.table.renderer.*\ncom.twosigma.beaker.table.highlight.*\ngroovy.grape.Grape",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            },
            "outdir": "/home/leechuck/.groovy/grapes"
        }
    ],
    "cells": [
        {
            "id": "codeE0bnVz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// Download dependencies using Groovy's Grape system",
                    "import groovy.grape.Grape",
                    "Grape.grab(group:'org.semanticweb.elk', module:'elk-owlapi', version:'0.4.3')",
                    "Grape.grab(group:'net.sourceforge.owlapi', module:'owlapi-api', version:'4.2.5')",
                    "Grape.grab(group:'net.sourceforge.owlapi', module:'owlapi-apibinding', version:'4.2.5')",
                    "Grape.grab(group:'net.sourceforge.owlapi', module:'owlapi-impl', version:'4.2.5')",
                    "Grape.grab(group:'com.github.sharispe', module:'slib-sml', version:'0.9.1')",
                    ""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Groovy",
                "shellId": "36c39860-4c87-447f-b78a-2a3b85ffc8cf",
                "elapsedTime": 1503
            },
            "evaluatorReader": true,
            "lineCount": 8,
            "isError": false
        },
        {
            "id": "codeRgRGMc",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// Create an ontology in OWLAPI, classify using ELK and write the classified ontology to a file",
                    "",
                    "import java.net.*",
                    "import org.semanticweb.owlapi.model.parameters.*",
                    "import org.semanticweb.elk.owlapi.ElkReasonerFactory;",
                    "import org.semanticweb.elk.owlapi.ElkReasonerConfiguration",
                    "import org.semanticweb.elk.reasoner.config.*",
                    "import org.semanticweb.owlapi.apibinding.OWLManager;",
                    "import org.semanticweb.owlapi.reasoner.*",
                    "import org.semanticweb.owlapi.reasoner.structural.StructuralReasoner",
                    "import org.semanticweb.owlapi.vocab.OWLRDFVocabulary;",
                    "import org.semanticweb.owlapi.model.*;",
                    "import org.semanticweb.owlapi.io.*;",
                    "import org.semanticweb.owlapi.owllink.*;",
                    "import org.semanticweb.owlapi.util.*;",
                    "import org.semanticweb.owlapi.search.*;",
                    "import org.semanticweb.owlapi.manchestersyntax.renderer.*;",
                    "import org.semanticweb.owlapi.reasoner.structural.*",
                    "",
                    "// Create the ontology manager",
                    "OWLOntologyManager manager = OWLManager.createOWLOntologyManager()",
                    "// Load the latest version of the PhenomeNET Ontology; for more information about this ontology, see http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005500",
                    "def ont = manager.loadOntologyFromOntologyDocument(new IRI(\"http://aber-owl.net/aber-owl/diseasephenotypes/ontology/phenomenet-map.owl\"))",
                    "// Print the number of classes in the ontology, including all its imports (import closure \"true\")",
                    "println \"Number of classes: \" + ont.getClassesInSignature(true).size()",
                    "",
                    "// create data factory (to create axioms, classes, etc.)",
                    "OWLDataFactory fac = manager.getOWLDataFactory()",
                    "",
                    "// initialize the ELK reasoner and classify the ontology",
                    "ConsoleProgressMonitor progressMonitor = new ConsoleProgressMonitor()",
                    "OWLReasonerConfiguration config = new SimpleConfiguration(progressMonitor)",
                    "ElkReasonerFactory f1 = new ElkReasonerFactory()",
                    "OWLReasoner reasoner = f1.createReasoner(ont,config)",
                    "",
                    "// get all subclasses of \"Mode of inheritance\", including all descendant classes (direct set to \"false\")",
                    "reasoner.getSubClasses(fac.getOWLClass(IRI.create(\"http://purl.obolibrary.org/obo/HP_0000005\")), false).getFlattened().each { cl ->",
                    "  def ciri = cl.getIRI()",
                    "  // now we get the label (rdfs:label) for each of the classes and print to stdout",
                    "  EntitySearcher.getAnnotations(cl, ont, fac.getRDFSLabel()).each { a ->",
                    "    OWLAnnotationValue val = a.getValue()",
                    "    if(val instanceof OWLLiteral) {",
                    "      def label = ((OWLLiteral)val).getLiteral()",
                    "      println \"$label ($ciri)\"",
                    "    }",
                    "  }",
                    "}",
                    "// write the inferred version of the ontology to a file (/tmp/phenomenet-inferred.owl)",
                    "def outont = manager.createOntology(new IRI(\"http://aber-owl.net/ismb-tutorial/phenomenet-inferred.owl\"))",
                    "InferredOntologyGenerator generator = new InferredOntologyGenerator(reasoner, [new InferredSubClassAxiomGenerator()])",
                    "generator.fillOntology(fac, outont)",
                    "",
                    "manager.saveOntology(outont, IRI.create(\"file:/tmp/phenomenet-inferred.owl\"))",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "Number of classes: 224748\nLoading 1 of 3 ...\n    1%\n    2%\n    3%\n    4%\n    5%\n    6%\n    7%\n    8%\n"
                        },
                        {
                            "type": "out",
                            "value": "    9%\n    10%\n    11%\n    12%\n    13%\n    14%\n    15%\n    16%\n    17%\n    18%\n    19%\n    20%\n    21%\n    22%\n    23%\n    24%\n    25%\n    26%\n    27%\n    28%\n    29%\n"
                        },
                        {
                            "type": "out",
                            "value": "    30%\n    31%\n    32%\n    33%\n    34%\n    35%\n    36%\n    37%\n    38%\n    39%\n    40%\n    41%\n    42%\n    43%\n    44%\n    45%\n    46%\n    47%\n    48%\n    49%\n    50%\n"
                        },
                        {
                            "type": "out",
                            "value": "    51%\n    52%\n    53%\n    54%\n    55%\n    56%\n    57%\n    58%\n    59%\n    60%\n    61%\n    62%\n    63%\n    64%\n    65%\n    66%\n    67%\n    68%\n    69%\n    70%\n    71%\n"
                        },
                        {
                            "type": "out",
                            "value": "    72%\n    73%\n    74%\n    75%\n    76%\n    77%\n    78%\n    79%\n    80%\n    81%\n    82%\n    83%\n    84%\n    85%\n    86%\n    87%\n    88%\n    89%\n    90%\n    91%\n    92%\n"
                        },
                        {
                            "type": "out",
                            "value": "    93%\n    94%\n    95%\n    96%\n    97%\n    98%\n    99%\n    ... finished\nLoading 2 of 3 ...\n    ... finished\nLoading 3 of 3 ...\n"
                        },
                        {
                            "type": "out",
                            "value": "    1%\n    2%\n    3%\n    4%\n    5%\n    6%\n    7%\n    8%\n    9%\n    10%\n    11%\n    12%\n    13%\n    14%\n    16%\n    17%\n    18%\n    19%\n    20%\n    21%\n    22%\n"
                        },
                        {
                            "type": "out",
                            "value": "    23%\n    24%\n    25%\n    26%\n    27%\n    28%\n    29%\n    30%\n    31%\n    33%\n    34%\n    35%\n    36%\n    37%\n    38%\n    39%\n    40%\n    41%\n    43%\n    44%\n    45%\n"
                        },
                        {
                            "type": "out",
                            "value": "    46%\n    47%\n    48%\n    49%\n    50%\n    51%\n    53%\n    54%\n    55%\n    56%\n    57%\n    58%\n    59%\n    60%\n    61%\n    62%\n    63%\n    64%\n    65%\n    66%\n    67%\n"
                        },
                        {
                            "type": "out",
                            "value": "    68%\n    69%\n    70%\n    71%\n    72%\n    73%\n    74%\n    75%\n    76%\n    77%\n    78%\n    79%\n    80%\n    81%\n    82%\n    83%\n    84%\n    85%\n    86%\n    87%\n    88%\n"
                        },
                        {
                            "type": "out",
                            "value": "    90%\n    91%\n    92%\n    93%\n    94%\n    95%\n    96%\n    97%\n    98%\n    99%\n    ... finished\n"
                        },
                        {
                            "type": "out",
                            "value": "Gonosomal inheritance (http://purl.obolibrary.org/obo/HP_0010985)\nDigenic inheritance (http://purl.obolibrary.org/obo/HP_0010984)\nOligogenic inheritance (http://purl.obolibrary.org/obo/HP_0010983)\nPolygenic inheritance (http://purl.obolibrary.org/obo/HP_0010982)\nX-linked inheritance (http://purl.obolibrary.org/obo/HP_0001417)\nX-linked recessive inheritance (http://purl.obolibrary.org/obo/HP_0001419)\nAutosomal recessive inheritance (http://purl.obolibrary.org/obo/HP_0000007)\nAutosomal dominant (http://purl.obolibrary.org/obo/HP_0000006)\nAutosomal dominant inheritance (http://purl.obolibrary.org/obo/HP_0000006)\nMale-limited autosomal dominant (http://purl.obolibrary.org/obo/HP_0001475)\nAutosomal dominant contiguous gene syndrome (http://purl.obolibrary.org/obo/HP_0001452)\nSex-limited autosomal dominant (http://purl.obolibrary.org/obo/HP_0001470)\nFamilial predisposition (http://purl.obolibrary.org/obo/HP_0001472)\nY-linked inheritance (http://purl.obolibrary.org/obo/HP_0001450)\nAutosomal dominant inheritance with paternal imprinting (http://purl.obolibrary.org/obo/HP_0012274)\nAutosomal dominant inheritance with maternal imprinting (http://purl.obolibrary.org/obo/HP_0012275)\nSomatic mutation (http://purl.obolibrary.org/obo/HP_0001428)\nMitochondrial inheritance (http://purl.obolibrary.org/obo/HP_0001427)\nX-linked dominant inheritance (http://purl.obolibrary.org/obo/HP_0001423)\nGenetic anticipation with paternal anticipation bias (http://purl.obolibrary.org/obo/HP_0003744)\nMultifactorial inheritance (http://purl.obolibrary.org/obo/HP_0001426)\n"
                        },
                        {
                            "type": "out",
                            "value": "Multifactorial Inheritance (http://purl.obolibrary.org/obo/HP_0001426)\nHeterogeneous (http://purl.obolibrary.org/obo/HP_0001425)\nSporadic (http://purl.obolibrary.org/obo/HP_0003745)\nSomatic mosaicism (http://purl.obolibrary.org/obo/HP_0001442)\nGenetic anticipation (http://purl.obolibrary.org/obo/HP_0003743)\nAnticipation, Genetic (http://purl.obolibrary.org/obo/HP_0003743)\nAutosomal dominant somatic cell mutation (http://purl.obolibrary.org/obo/HP_0001444)\nContiguous gene syndrome (http://purl.obolibrary.org/obo/HP_0001466)\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "36c39860-4c87-447f-b78a-2a3b85ffc8cf",
                "elapsedTime": 255252,
                "height": 3703
            },
            "evaluatorReader": true,
            "lineCount": 54,
            "isError": false
        },
        {
            "id": "codeMXYFVg",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// Here we demonstrate the use of semantic similarity, starting with some simple examples and moving to some real data analysis",
                    "import org.openrdf.model.vocabulary.*",
                    "import slib.sglib.io.loader.*",
                    "import slib.sml.sm.core.metrics.ic.utils.*",
                    "import slib.sml.sm.core.utils.*",
                    "import slib.sglib.io.loader.bio.obo.*",
                    "import org.openrdf.model.URI",
                    "import slib.graph.algo.extraction.rvf.instances.*",
                    "import slib.sglib.algo.graph.utils.*",
                    "import slib.utils.impl.Timer",
                    "import slib.graph.algo.extraction.utils.*",
                    "import slib.graph.model.graph.*",
                    "import slib.graph.model.repo.*",
                    "import slib.graph.model.impl.graph.memory.*",
                    "import slib.sml.sm.core.engine.*",
                    "import slib.graph.io.conf.*",
                    "import slib.graph.model.impl.graph.elements.*",
                    "import slib.graph.algo.extraction.rvf.instances.impl.*",
                    "import slib.graph.model.impl.repo.*",
                    "import slib.graph.io.util.*",
                    "import slib.graph.io.loader.*",
                    "  ",
                    "// set up the SML environment; generate a new graph",
                    "URIFactory factory = URIFactoryMemory.getSingleton()",
                    "URI graph_uri = factory.getURI(\"http://aber-owl.net/ismb-tutorial/\")",
                    "G graph = new GraphMemory(graph_uri)",
                    "",
                    "// populate the graph using from the ontology",
                    "GDataConf graphconf = new GDataConf(GFormat.RDF_XML, \"/tmp/phenomenet-inferred.owl\")",
                    "GraphLoaderGeneric.populate(graphconf, graph)",
                    "",
                    "// generate a new \"root\" class on top of the graph",
                    "URI virtualRoot = factory.getURI(\"http://aber-owl.net/ismb-tutorial/virtualRoot\")",
                    "graph.addV(virtualRoot)",
                    "GAction rooting = new GAction(GActionType.REROOTING)",
                    "rooting.addParameter(\"root_uri\", virtualRoot.stringValue())",
                    "GraphActionExecutor.applyAction(factory, rooting, graph)",
                    "",
                    "// configure the semantic similarity measure: use Resnik's (extrinsic) information content measure, and Resnik's similarity measure",
                    "ICconf icConf = new IC_Conf_Topo(\"Sanchez\", SMConstants.FLAG_ICI_SANCHEZ_2011)",
                    "SMconf smConfPairwise = new SMconf(\"Resnik\", SMConstants.FLAG_SIM_PAIRWISE_DAG_NODE_RESNIK_1995 )",
                    "smConfPairwise.setICconf(icConf)",
                    "",
                    "// initialize the engine",
                    "SM_Engine engine = new SM_Engine(graph)",
                    "",
                    "// similarity between two classes from HPO",
                    "def cl1 = factory.getURI(\"http://purl.obolibrary.org/obo/HP_0030766\") // Ear pain",
                    "def cl2 = factory.getURI(\"http://purl.obolibrary.org/obo/HP_0012781\") // mid frequency hearing loss",
                    "println \"Similarity between 'Ear pain' and 'mid frequency hearing loss': \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "// similarity between two classes from HPO",
                    "cl2 = factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001636\") // tetralogy of fallot",
                    "println \"Similarity between 'Ear pain' and 'tetralogy of fallot': \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "// similarity between two classes, one from HPO and one from MP",
                    "cl1 = factory.getURI(\"http://purl.obolibrary.org/obo/MP_0004084\") // abnormal cardiac muscle relaxation",
                    "cl2 = factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001636\") // tetralogy of fallot",
                    "println \"Similarity between 'abnormal cardiac muscle relaxation' (MP) and 'tetralogy of fallot' (HP): \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "// similarity between two classes, one from HPO and one from MP",
                    "cl1 = factory.getURI(\"http://purl.obolibrary.org/obo/MP_0010402\") // ventricular septal defect",
                    "println \"Similarity between 'ventricular septal defect' (MP) and 'tetralogy of fallot' (HP): \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "",
                    "// now we download mouse phenotype annotations and add them to our graph as instances (using rdf:type)",
                    "new URL (\"http://www.informatics.jax.org/downloads/reports/MGI_GenePheno.rpt\").getText().splitEachLine(\"\\t\") { line ->",
                    "  def geneid = line[6]",
                    "  def idUri = factory.getURI(\"http://phenomebrowser.net/ismb-tutorial/gene/\"+geneid)",
                    "  def pheno = line[4].replaceAll(\":\",\"_\")",
                    "  def phenoUri = factory.getURI(\"http://purl.obolibrary.org/obo/\"+pheno)",
                    "  Edge e = new Edge(idUri, RDF.TYPE, phenoUri)",
                    "  graph.addE(e)",
                    "}",
                    "",
                    "// now that we have instances/annotations, we switch to Resnik's information content measure",
                    "icConf = new IC_Conf_Corpus(\"ResnikIC\", SMConstants.FLAG_IC_ANNOT_RESNIK_1995_NORMALIZED)",
                    "smConfPairwise.setICconf(icConf)",
                    "// using Best-Matching Average to merge annotations when comparing sets of classes",
                    "SMconf smConfGroupwise = new SMconf(\"BMA\", SMConstants.FLAG_SIM_GROUPWISE_BMA)",
                    "// and re-initialize the graph",
                    "engine = new SM_Engine(graph)",
                    "",
                    "// similarity between two classes, one from HPO and one from MP",
                    "cl1 = factory.getURI(\"http://purl.obolibrary.org/obo/MP_0004084\") // abnormal cardiac muscle relaxation",
                    "cl2 = factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001636\") // tetralogy of fallot",
                    "println \"Similarity (Resnik) between 'abnormal cardiac muscle relaxation' (MP) and 'tetralogy of fallot' (HP): \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "// similarity between two classes, one from HPO and one from MP",
                    "cl1 = factory.getURI(\"http://purl.obolibrary.org/obo/MP_0010402\") // ventricular septal defect",
                    "println \"Similarity (Resnik) between 'ventricular septal defect' (MP) and 'tetralogy of fallot' (HP): \"+engine.compare(smConfPairwise, cl1, cl2)",
                    "",
                    "InstancesAccessor ia = new InstanceAccessor_RDF_TYPE(graph)",
                    "",
                    "// that's our patient, with a single phenotype of an orphan disease, \"MACULAR DYSTROPHY, VITELLIFORM, 1; VMD1\" (https://www.omim.org/entry/153840)",
                    "Set patient = [ factory.getURI(\"http://purl.obolibrary.org/obo/HP_0007754\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0007663\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001123\"), ",
                    "  factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000505\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0007677\") ]",
                    "// we store the similarity values in the results list",
                    "def results = new LinkedHashSet()",
                    "engine.getInstances().each { gene ->",
                    "  def phenoSet = ia.getDirectClass(gene) // gets all the annotations of each instance (gene)",
                    "  Expando exp = new Expando()",
                    "  try { // this part might fail if the version of MP we use to compute similarity and the MP used for annotation is different; we ignore all errors for now",
                    "    exp.sim = engine.compare(smConfGroupwise, smConfPairwise, phenoSet, patient)",
                    "    exp.gene = gene",
                    "    results.add(exp)",
                    "  } catch (Exception E) {}",
                    "}",
                    "// sorting results by similarity (highest first) and output the top 10 predictions",
                    "println \"Highest ranking genes for patient 1 (macular dystrophy): \"+results.sort { it.sim }.reverse()[0..10]",
                    "",
                    "// another patient with Wiskott-Aldrich Syndrome",
                    "patient = [ factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000112\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000225\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000246\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000388\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000421\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000964\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000967\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0000979\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001287\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001419\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001873\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001878\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001888\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001891\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0001983\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002037\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002090\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002248\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002249\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002783\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002788\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002848\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002850\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002963\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0002971\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0003010\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0003212\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0003261\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0005310\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0005537\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0011944\"), factory.getURI(\"http://purl.obolibrary.org/obo/HP_0040184\") ]",
                    "results = new LinkedHashSet()",
                    "engine.getInstances().each { gene ->",
                    "  def phenoSet = ia.getDirectClass(gene) // gets all the annotations of each instance (gene)",
                    "  Expando exp = new Expando()",
                    "  try { // this might fail if the version of MP we use to compute similarity and the MP used for annotation is different; we ignore this for now",
                    "    exp.sim = engine.compare(smConfGroupwise, smConfPairwise, phenoSet, patient)",
                    "    exp.gene = gene",
                    "    results.add(exp)",
                    "  } catch (Exception E) {}",
                    "}",
                    "// sorting results by similarity (highest first) and output the top 10 predictions",
                    "println \"Highest ranking genes for patient 2 (Wiskott Aldrich Syndrom): \"+results.sort { it.sim }.reverse()[0..10] // includes MGI:1891436, FOXP3",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "Similarity between 'Ear pain' and 'mid frequency hearing loss': 8.617973362046424\nSimilarity between 'Ear pain' and 'tetralogy of fallot': 5.755799731300896\nSimilarity between 'abnormal cardiac muscle relaxation' (MP) and 'tetralogy of fallot' (HP): 6.185691113293361\nSimilarity between 'ventricular septal defect' (MP) and 'tetralogy of fallot' (HP): 11.744447815899305\n"
                        },
                        {
                            "type": "out",
                            "value": "Similarity (Resnik) between 'abnormal cardiac muscle relaxation' (MP) and 'tetralogy of fallot' (HP): 0.3081552004492615\nSimilarity (Resnik) between 'ventricular septal defect' (MP) and 'tetralogy of fallot' (HP): 0.5646249011677333\n"
                        },
                        {
                            "type": "out",
                            "value": "Highest ranking genes for patient 1 (macular dystrophy): [{gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:5792188, sim=0.5557272149543228}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1097692, sim=0.5431378780489966}, {gen\ne=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1915084, sim=0.528033544635744}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:2384871, sim=0.5205081486094517}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:97525, sim=0\n.507130034706424}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:2685267, sim=0.5025597454187068}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1194883, sim=0.4988557373922284}, {gene=http://phenomebrowser.net/ismb-tutori\nal/gene/MGI:95793, sim=0.49824008468157754}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:2448607, sim=0.4965157305551118}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1341818, sim=0.49466107317450014}, {gene=http://phe\nnomebrowser.net/ismb-tutorial/gene/MGI:1339969, sim=0.4908699177666808}]\n"
                        },
                        {
                            "type": "out",
                            "value": "Highest ranking genes for patient 2 (Wiskott Aldrich Syndrom): [{gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:102849, sim=0.5236455906435838}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:96548, sim=0.5129886399921395}, {\ngene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:98941, sim=0.5105585164660412}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1349436, sim=0.5067199174735757}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:5792227, s\nim=0.4944061225076414}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:2180699, sim=0.49243011476821463}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:1918576, sim=0.4913932346326934}, {gene=http://phenomebrowser.net/ismb-\ntutorial/gene/MGI:1891436, sim=0.4901568290900864}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:87967, sim=0.4897976897682361}, {gene=http://phenomebrowser.net/ismb-tutorial/gene/MGI:96549, sim=0.48710631613737043}, {gene=http://\nphenomebrowser.net/ismb-tutorial/gene/MGI:105311, sim=0.48651435350387817}]\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "36c39860-4c87-447f-b78a-2a3b85ffc8cf",
                "elapsedTime": 118574,
                "height": 295
            },
            "evaluatorReader": true,
            "lineCount": 126,
            "isError": false
        }
    ],
    "namespace": {}
}
